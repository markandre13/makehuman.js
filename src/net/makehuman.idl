// frontend is called by the backend
interface Frontend {
    // callback to receive raw chordata frame
    oneway void chordata(in sequence<octet> data);

    // callbacks to receive face data
    // names for the entries in faceLandmarks() blendshapes sequence

    // send at the beginning or whenever that list of names changes
    oneway void faceBlendshapeNames(in sequence<string> faceBlendshapeNames);
    oneway void faceLandmarks(
        in sequence<float> landmarks,
        in sequence<float> blendshapes,
        in sequence<float> transform,
        in unsigned long long timestamp_ms);

    oneway void poseLandmarks(
        in sequence<float> landmarks,
        in unsigned long long timestamp_ms);

    // temporary hack
    oneway void frame(in unsigned long frame);
};

enum CaptureDeviceType {
    BODY,
    FACE,
    HAND
};

interface CaptureDevice {
};

struct CaptureDeviceInfo {
    CaptureDevice device;
    CaptureDeviceType type;
    string id;
    string name;
};

interface ARKitFaceReceiver {
    // send at the beginning or whenever that list of names changes
    oneway void faceBlendshapeNames(in sequence<string> faceBlendshapeNames);
    oneway void faceLandmarks(
        in sequence<float> landmarks,
        in sequence<float> blendshapes,
        in sequence<float> transform,
        in unsigned long long timestamp_ms);
};

interface ARKitFaceDevice: CaptureDevice {
    attribute ARKitFaceReceiver receiver;
};

/**
 * video camera available on the host
 */
interface VideoCamera {
    readonly attribute string id;
    attribute string name;
    readonly attribute string features;
};

/**
 * media pipe task use use the video camera
 */
interface MediaPipeTask {
    readonly attribute string name;
};

struct VideoSize {
    unsigned short fps;
    unsigned long frames;
};

// Recorder, Transport, ...
interface Recorder {
    VideoSize open(in string filename);
    void close();
    void record();
    void play();
    void stop();
    void pause();
    void seek(in unsigned long frame);
};

// backend is called by the frontend
interface Backend {
    // called by the frontend to register itself to receive data
    void setFrontend(in Frontend frontend);

    readonly attribute sequence<CaptureDeviceInfo> captureDevices;

    readonly attribute Recorder recorder;
 
    // list of available video cameras
    sequence<VideoCamera> getVideoCameras(); // readonly attribute videoCameras
    // current selected video camera
    attribute VideoCamera camera; // activeCamera

    // list of available MediaPipe tasks
    sequence<MediaPipeTask> getMediaPipeTasks();
    // current selected MediaPipe task
    attribute MediaPipeTask mediaPipeTask;
};
